using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Runtime.Loader;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Devices.Client;
using System.Net.Http;
using Newtonsoft.Json;

using PredictionModule.Models;
using System.Collections.Generic;
using System.Web;

namespace PredictionModule
{
    class Program
    {
        private static readonly HttpClient httpClient = new HttpClient();

        static void Main(string[] args)
        {
            Init().Wait();

            // Wait until the app unloads or is cancelled
            var cts = new CancellationTokenSource();
            AssemblyLoadContext.Default.Unloading += (ctx) => cts.Cancel();
            Console.CancelKeyPress += (sender, cpe) => cts.Cancel();
            WhenCancelled(cts.Token).Wait(); 
        }

        /// <summary>
        /// Handles cleanup operations when app is cancelled or unloads
        /// </summary>
        public static Task WhenCancelled(CancellationToken cancellationToken)
        {
            var tcs = new TaskCompletionSource<bool>();
            cancellationToken.Register(s => ((TaskCompletionSource<bool>)s).SetResult(true), tcs);
            return tcs.Task;
        }

        /// <summary>
        /// Initializes the ModuleClient and sets up the callback to receive
        /// messages containing temperature information
        /// </summary>
        static async Task Init()
        {
            AmqpTransportSettings amqpSetting = new AmqpTransportSettings(TransportType.Amqp_Tcp_Only);
            ITransportSettings[] settings = { amqpSetting };

            // Open a connection to the Edge runtime
            ModuleClient ioTHubModuleClient = await ModuleClient.CreateFromEnvironmentAsync(settings);
            await ioTHubModuleClient.OpenAsync();
            Console.WriteLine("IoT Hub module client initialized.");

            // Register callback to be called when a message is received by the module
            await ioTHubModuleClient.SetInputMessageHandlerAsync("locationInput", PipeMessage, ioTHubModuleClient);
        }

        /// <summary>
        /// This method is called whenever the module is sent a message from the EdgeHub. 
        /// It just pipe the messages without any change.
        /// It prints all the incoming messages.
        /// </summary>
        static async Task<MessageResponse> PipeMessage(Message message, object userContext)
        {
            
            var moduleClient = userContext as ModuleClient;
            if (moduleClient == null)
            {
                throw new InvalidOperationException("UserContext doesn't contain " + "expected values");
            }

            byte[] messageBytes = message.GetBytes();
            string messageString = Encoding.UTF8.GetString(messageBytes);
            Console.WriteLine($"Received message. Body: [{messageString}]");

            if (!string.IsNullOrEmpty(messageString))
            {
                var balloonMessage = JsonConvert.DeserializeObject<BalloonMessage>(messageString);

                var predictionMessage = await GetPrediction(balloonMessage);

                var predictionMessageString = JsonConvert.SerializeObject(predictionMessage);

                var predictionMessageBytes = Encoding.UTF8.GetBytes(predictionMessageString);

                var iotEdgePredictionMessage = new Message(predictionMessageBytes);
                
                await moduleClient.SendEventAsync("predictionOutput", iotEdgePredictionMessage);
                Console.WriteLine("Received message sent");
            }
            return MessageResponse.Completed;
        }


        private static async Task<PredictionMessage> GetPrediction (BalloonMessage balloonMessage)
        {
            // example post data
            // lat=52.2135&lon=0.0964&initial_alt=0&hour=00&min=00&second=0&day=19&month=9&year=2018&ascent=2.33&burst=33000&drag=5&submit=Run+Prediction

            var postValues = new Dictionary<string, string>
            {
                { "action","submitForm"},
                { "lat",  balloonMessage.LaunchLat.ToString()},
                { "lon",  balloonMessage.LaunchLong.ToString()},
                { "initial_alt", balloonMessage.LaunchAltitude.ToString()}, 
                { "hour", balloonMessage.LaunchTime.Hour.ToString()}, 
                { "min", balloonMessage.LaunchTime.Minute.ToString()}, 
                { "second", balloonMessage.LaunchTime.Second.ToString()},
                { "day", balloonMessage.LaunchTime.Day.ToString()},
                { "month", balloonMessage.LaunchTime.Month.ToString()}, 
                { "year", balloonMessage.LaunchTime.Year.ToString()},
                { "ascent", balloonMessage.AscentRate.ToString()},
                { "drag", balloonMessage.DescentRate.ToString()},
                { "burst", balloonMessage.BurstAltitude.ToString()},
                { "submit", "Run Prediction"}
            };

            var content = new FormUrlEncodedContent(postValues);

            var response = await httpClient.PostAsync("http://predict.habhub.org/ajax.php", content);

            if (response.IsSuccessStatusCode)
            {
                var responseString = await response.Content.ReadAsStringAsync();

                var predictionResponse = JsonConvert.DeserializeObject<PredictionResponse>(responseString);

                // example request: http://predict.habhub.org/ajax.php?action=getCSV&uuid=202f57505788f22612beb5093b66ff53c60a43b5

                var builder = new UriBuilder("http://predict.habhub.org/ajax.php");
                builder.Port = -1;
                var query = HttpUtility.ParseQueryString(builder.Query);
                query["action"] = "getCSV";
                query["uuid"] = predictionResponse.uuid;
                builder.Query = query.ToString();
                string url = builder.ToString();
                
                
                response = await httpClient.GetAsync(url);

                if (response.IsSuccessStatusCode)
                {
                    responseString = await response.Content.ReadAsStringAsync();

                    // todo - need to turn each record into a PredictionPoint
                    // data looks like:
                    // ["1537315200,52.2135,0.0964,0","1537315250,52.2171,0.101268,116.5","1537315300,52.2212,0.107272,233","1537315350,52.2263,0.114993,349.5","1537315400,52.2318,0.123808,466","1537315450,52.2375,0.133558,582.5","1537315500,52.2432,0.144306,699","1537315550,52.2487,0.155997,815.5","1537315600,52.2539,0.168281,932","1537315650,52.2587,0.180997,1048.5","1537315700,52.2632,0.193656,1165","1537315750,52.2675,0.206176,1281.5","1537315800,52.2717,0.218463,1398","1537315850,52.2758,0.230505,1514.5","1537315900,52.2798,0.242298,1631","1537315950,52.284,0.253852,1747.5","1537316000,52.2883,0.265261,1864","1537316050,52.2929,0.276556,1980.5","1537316100,52.2978,0.287868,2097","1537316150,52.3031,0.299266,2213.5","1537316200,52.3087,0.310816,2330","1537316250,52.3145,0.322603,2446.5","1537316300,52.3207,0.334634,2563","1537316350,52.3271,0.346935,2679.5","1537316400,52.3338,0.359504,2796","1537316450,52.3407,0.372318,2912.5","1537316500,52.3478,0.385366,3029","1537316550,52.355,0.398627,3145.5","1537316600,52.3625,0.412062,3262","1537316650,52.3701,0.425668,3378.5","1537316700,52.3779,0.439417,3495","1537316750,52.3858,0.4533,3611.5","1537316800,52.3938,0.467306,3728","1537316850,52.4019,0.481412,3844.5","1537316900,52.4101,0.495619,3961","1537316950,52.4184,0.509909,4077.5","1537317000,52.4268,0.524271,4194","1537317050,52.4352,0.538703,4310.5","1537317100,52.4437,0.553178,4427","1537317150,52.4522,0.56769,4543.5","1537317200,52.4607,0.582247,4660","1537317250,52.4692,0.596886,4776.5","1537317300,52.4777,0.611615,4893","1537317350,52.4862,0.626443,5009.5","1537317400,52.4946,0.641427,5126","1537317450,52.503,0.656575,5242.5","1537317500,52.5113,0.67189,5359","1537317550,52.5196,0.687428,5475.5","1537317600,52.5279,0.703195,5592","1537317650,52.5361,0.719191,5708.5","1537317700,52.5443,0.735415,5825","1537317750,52.5524,0.751874,5941.5","1537317800,52.5605,0.768569,6058","1537317850,52.5686,0.785486,6174.5","1537317900,52.5767,0.802603,6291","1537317950,52.5847,0.819924,6407.5","1537318000,52.5927,0.837448,6524","1537318050,52.6007,0.855153,6640.5","1537318100,52.6086,0.873037,6757","1537318150,52.6165,0.891101,6873.5","1537318200,52.6244,0.909341,6990","1537318250,52.6323,0.927751,7106.5","1537318300,52.6401,0.946327,7223","1537318350,52.6479,0.965066,7339.5","1537318400,52.6557,0.983965,7456","1537318450,52.6635,1.00303,7572.5","1537318500,52.6713,1.02225,7689","1537318550,52.6792,1.04163,7805.5","1537318600,52.687,1.06114,7922","1537318650,52.695,1.08077,8038.5","1537318700,52.7029,1.1005,8155","1537318750,52.7109,1.12034,8271.5","1537318800,52.719,1.14027,8388","1537318850,52.7271,1.16026,8504.5","1537318900,52.7353,1.18033,8621","1537318950,52.7435,1.20046,8737.5","1537319000,52.7518,1.22067,8854","1537319050,52.7601,1.24094,8970.5","1537319100,52.7685,1.26125,9087","1537319150,52.777,1.28162,9203.5","1537319200,52.7855,1.30205,9320","1537319250,52.794,1.32259,9436.5","1537319300,52.8025,1.34332,9553","1537319350,52.8108,1.36423,9669.5","1537319400,52.8191,1.38532,9786","1537319450,52.8274,1.40659,9902.5","1537319500,52.8356,1.42775,10019","1537319550,52.8438,1.44855,10135.5","1537319600,52.8521,1.46897,10252","1537319650,52.8605,1.48902,10368.5","1537319700,52.8689,1.50869,10485","1537319750,52.8774,1.52804,10601.5","1537319800,52.8861,1.54729,10718","1537319850,52.8951,1.56645,10834.5","1537319900,52.9043,1.58553,10951","1537319950,52.9137,1.60451,11067.5","1537320000,52.9234,1.62341,11184","1537320050,52.9331,1.64224,11300.5","1537320100,52.9426,1.66097,11417","1537320150,52.952,1.67959,11533.5","1537320200,52.9611,1.6981,11650","1537320250,52.9701,1.7165,11766.5","1537320300,52.9789,1.73479,11883","1537320350,52.9875,1.75291,11999.5","1537320400,52.9961,1.7706,12116","1537320450,53.0046,1.78785,12232.5","1537320500,53.0131,1.80465,12349","1537320550,53.0215,1.82098,12465.5","1537320600,53.0299,1.83687,12582","1537320650,53.0382,1.85229,12698.5","1537320700,53.0465,1.86727,12815","1537320750,53.0547,1.88196,12931.5","1537320800,53.0628,1.89642,13048","1537320850,53.0708,1.91067,13164.5","1537320900,53.0787,1.92471,13281","1537320950,53.0865,1.93853,13397.5","1537321000,53.0941,1.95214,13514","1537321050,53.1017,1.96555,13630.5","1537321100,53.1092,1.97875,13747","1537321150,53.1166,1.99174,13863.5","1537321200,53.124,2.00453,13980","1537321250,53.1312,2.01714,14096.5","1537321300,53.1384,2.02954,14213","1537321350,53.1456,2.04176,14329.5","1537321400,53.1527,2.05379,14446","1537321450,53.1597,2.06562,14562.5","1537321500,53.1666,2.07726,14679","1537321550,53.1735,2.08872,14795.5","1537321600,53.1803,2.09998,14912","1537321650,53.1871,2.11106,15028.5","1537321700,53.1937,2.12195,15145","1537321750,53.2002,2.13266,15261.5","1537321800,53.2065,2.14318,15378","1537321850,53.2127,2.15351,15494.5","1537321900,53.2188,2.16365,15611","1537321950,53.2247,2.1736,15727.5","1537322000,53.2305,2.18337,15844","1537322050,53.2361,2.19294,15960.5","1537322100,53.2417,2.20232,16077","1537322150,53.2471,2.21152,16193.5","1537322200,53.2523,2.22052,16310","1537322250,53.2574,2.22934,16426.5","1537322300,53.2624,2.23802,16543","1537322350,53.2674,2.24658,16659.5","1537322400,53.2722,2.255,16776","1537322450,53.2769,2.26329,16892.5","1537322500,53.2815,2.27146,17009","1537322550,53.286,2.27949,17125.5","1537322600,53.2904,2.2874,17242","1537322650,53.2947,2.29518,17358.5","1537322700,53.2989,2.30283,17475","1537322750,53.303,2.31035,17591.5","1537322800,53.3069,2.31775,17708","1537322850,53.3108,2.32502,17824.5","1537322900,53.3146,2.33216,17941","1537322950,53.3182,2.33919,18057.5","1537323000,53.3218,2.34608,18174","1537323050,53.3252,2.35285,18290.5","1537323100,53.3286,2.3595,18407","1537323150,53.3318,2.36603,18523.5","1537323200,53.3349,2.37243,18640","1537323250,53.338,2.37874,18756.5","1537323300,53.341,2.38498,18873","1537323350,53.3439,2.39114,18989.5","1537323400,53.3468,2.39723,19106","1537323450,53.3496,2.40325,19222.5","1537323500,53.3523,2.40919,19339","1537323550,53.3549,2.41505,19455.5","1537323600,53.3575,2.42084,19572","1537323650,53.3601,2.42656,19688.5","1537323700,53.3625,2.4322,19805","1537323750,53.3649,2.43776,19921.5","1537323800,53.3672,2.44324,20038","1537323850,53.3695,2.44865,20154.5","1537323900,53.3717,2.45398,20271","1537323950,53.3738,2.45924,20387.5","1537324000,53.3758,2.46442,20504","1537324050,53.3778,2.46952,20620.5","1537324100,53.3797,2.47454,20737","1537324150,53.3816,2.47947,20853.5","1537324200,53.3834,2.48429,20970","1537324250,53.3852,2.489,21086.5","1537324300,53.387,2.49359,21203","1537324350,53.3887,2.49807,21319.5","1537324400,53.3904,2.50243,21436","1537324450,53.3921,2.50668,21552.5","1537324500,53.3937,2.51082,21669","1537324550,53.3954,2.51484,21785.5","1537324600,53.397,2.51875,21902","1537324650,53.3986,2.52254,22018.5","1537324700,53.4001,2.52622,22135","1537324750,53.4016,2.52978,22251.5","1537324800,53.4031,2.53323,22368","1537324850,53.4046,2.53656,22484.5","1537324900,53.4061,2.53978,22601","1537324950,53.4075,2.54288,22717.5","1537325000,53.4089,2.54586,22834","1537325050,53.4103,2.54873,22950.5","1537325100,53.4116,2.55148,23067","1537325150,53.413,2.55411,23183.5","1537325200,53.4143,2.55663,23300","1537325250,53.4156,2.55903,23416.5","1537325300,53.4169,2.56132,23533","1537325350,53.4181,2.56349,23649.5","1537325400,53.4194,2.56554,23766","1537325450,53.4206,2.56747,23882.5","1537325500,53.4218,2.56929,23999","1537325550,53.423,2.57103,24115.5","1537325600,53.4241,2.57279,24232","1537325650,53.4253,2.57459,24348.5","1537325700,53.4265,2.57643,24465","1537325750,53.4276,2.57831,24581.5","1537325800,53.4288,2.58022,24698","1537325850,53.4299,2.58217,24814.5","1537325900,53.4311,2.58416,24931","1537325950,53.4322,2.58619,25047.5","1537326000,53.4333,2.58826,25164","1537326050,53.4344,2.59037,25280.5","1537326100,53.4355,2.59253,25397","1537326150,53.4366,2.59472,25513.5","1537326200,53.4377,2.59695,25630","1537326250,53.4388,2.59922,25746.5","1537326300,53.4398,2.60153,25863","1537326350,53.4409,2.60387,25979.5","1537326400,53.4419,2.60626,26096","1537326450,53.4429,2.60868,26212.5","1537326500,53.4439,2.61114,26329","1537326550,53.4449,2.61364,26445.5","1537326600,53.4459,2.61617,26562","1537326650,53.4468,2.61874,26678.5","1537326700,53.4478,2.62135,26795","1537326750,53.4487,2.62399,26911.5","1537326800,53.4495,2.62666,27028","1537326850,53.4503,2.62937,27144.5","1537326900,53.4511,2.63211,27261","1537326950,53.4518,2.63489,27377.5","1537327000,53.4525,2.6377,27494","1537327050,53.4532,2.64054,27610.5","1537327100,53.4538,2.64341,27727","1537327150,53.4544,2.64632,27843.5","1537327200,53.455,2.64927,27960","1537327250,53.4555,2.65224,28076.5","1537327300,53.456,2.65525,28193","1537327350,53.4564,2.65829,28309.5","1537327400,53.4569,2.66136,28426","1537327450,53.4572,2.66446,28542.5","1537327500,53.4576,2.6676,28659","1537327550,53.4579,2.67076,28775.5","1537327600,53.4582,2.67396,28892","1537327650,53.4584,2.67719,29008.5","1537327700,53.4586,2.68045,29125","1537327750,53.4588,2.68374,29241.5","1537327800,53.4589,2.68706,29358","1537327850,53.459,2.69041,29474.5","1537327900,53.4591,2.69379,29591","1537327950,53.4591,2.6972,29707.5","1537328000,53.4591,2.70064,29824","1537328050,53.4591,2.70411,29940.5","1537328100,53.459,2.70761,30057","1537328150,53.4589,2.71114,30173.5","1537328200,53.4588,2.7147,30290","1537328250,53.4586,2.71828,30406.5","1537328300,53.4584,2.7219,30523","1537328350,53.4582,2.72554,30639.5","1537328400,53.4579,2.72922,30756","1537328450,53.4576,2.73292,30872.5","1537328500,53.4573,2.73665,30989","1537328550,53.457,2.7404,31105.5","1537328600,53.4566,2.74419,31222","1537328650,53.4562,2.74806,31338.5","1537328700,53.4558,2.75202,31455","1537328750,53.4554,2.75606,31571.5","1537328800,53.455,2.7602,31688","1537328850,53.4546,2.76443,31804.5","1537328900,53.4542,2.76874,31921","1537328950,53.4538,2.77314,32037.5","1537329000,53.4534,2.77764,32154","1537329050,53.4529,2.78222,32270.5","1537329100,53.4525,2.78689,32387","1537329150,53.4521,2.79164,32503.5","1537329200,53.4517,2.79649,32620","1537329250,53.4513,2.80143,32736.5","1537329300,53.4508,2.80645,32853","1537329350,53.4504,2.81156,32969.5","1537329400,53.45,2.81618,31175.6","1537329450,53.4499,2.81965,29066","1537329500,53.4502,2.82264,27264.7","1537329550,53.451,2.82523,25697.9","1537329600,53.452,2.82751,24318.4","1537329650,53.4532,2.82991,23080","1537329700,53.4546,2.83325,21951.5","1537329750,53.4562,2.83745,20915","1537329800,53.4581,2.84249,19956.6","1537329850,53.4606,2.84834,19065.3","1537329900,53.4636,2.855,18232.3","1537329950,53.4673,2.86269,17450.5","1537330000,53.4718,2.8714,16714","1537330050,53.4769,2.88111,16017.7","1537330100,53.4828,2.89193,15357.6","1537330150,53.4894,2.90384,14730","1537330200,53.4964,2.91676,14131.8","1537330250,53.5037,2.93062,13560.6","1537330300,53.5111,2.94552,13013.8","1537330350,53.5187,2.96172,12489.6","1537330400,53.5264,2.98025,11986.1","1537330450,53.5345,3.00055,11501.7","1537330500,53.543,3.02171,11035.2","1537330550,53.5513,3.04372,10583.6","1537330600,53.559,3.06653,10144.5","1537330650,53.5665,3.09003,9717.09","1537330700,53.5739,3.11381,9300.6","1537330750,53.5814,3.13756,8894.38","1537330800,53.589,3.16108,8497.81","1537330850,53.5966,3.18437,8110.36","1537330900,53.6041,3.20732,7731.52","1537330950,53.6115,3.22978,7360.83","1537331000,53.6189,3.25148,6997.88","1537331050,53.6264,3.27222,6642.27","1537331100,53.634,3.29216,6293.66","1537331150,53.6419,3.31139,5951.7","1537331200,53.6499,3.32996,5616.1","1537331250,53.6581,3.3478,5286.57","1537331300,53.6665,3.36489,4962.84","1537331350,53.675,3.38132,4644.68","1537331400,53.6835,3.39722,4331.84","1537331450,53.6918,3.41271,4024.12","1537331500,53.6999,3.42784,3721.31","1537331550,53.7077,3.4426,3423.23","1537331600,53.7152,3.4569,3129.69","1537331650,53.7223,3.47058,2840.53","1537331700,53.7289,3.48346,2555.59","1537331750,53.7348,3.49526,2274.72","1537331800,53.7397,3.50583,1997.78","1537331850,53.7439,3.51545,1724.64","1537331900,53.7478,3.52482,1455.17","1537331950,53.7515,3.53443,1189.25","1537332000,53.755,3.54441,926.767","1537332050,53.7588,3.55496,667.618","1537332100,53.7635,3.56544,411.697","1537332150,53.7689,3.57404,158.906","1537332182,53.772,3.57838,-1.28064",""]//


                    // success
                    return new PredictionMessage();       
                }
            }

            return null;
        }
    }
}
